class Projectile(pygame.sprite.Sprite):
        def __init__(self, u, theta):
            super(Projectile, self).__init__()

            self.u = u
            self.theta = toRadian(abs(theta))
            self.x, self.y = origin
            self.color = random.choice(COLORS)

            self.ch = 0
            self.dx = 2
            
            self.f = self.getTrajectory()
            self.range = self.x + abs(self.getRange())

            self.path = []

        def timeOfFlight(self):
            return round((2 * self.u * math.sin(self.theta)) / g, 2)

        def getRange(self):
            range_ = ((self.u ** 2) * 2 * math.sin(self.theta) * math.cos(self.theta)) / g
            return round(range_, 2)

        def getMaxHeight(self):
            h = ((self.u ** 2) * (math.sin(self.theta)) ** 2) / (2 * g)
            return round(h, 2)

        def getTrajectory(self):
            return round(g /  (2 * (self.u ** 2) * (math.cos(self.theta) ** 2)), 4)

        def getProjectilePos(self, x):
            return x * math.tan(self.theta) - self.f * x ** 2

        def update(self):
            if self.x >= self.range:
                self.dx = 0
            self.x += self.dx
            self.ch = self.getProjectilePos(self.x - origin[0])

            self.path.append((self.x, self.y-abs(self.ch)))
            self.path = self.path[-50:]

            pygame.draw.circle(win, self.color, self.path[-1], 5)
            pygame.draw.circle(win, WHITE, self.path[-1], 5, 1)
            for pos in self.path[:-1:5]:
                pygame.draw.circle(win, WHITE, pos, 1)

    projectile_group = pygame.sprite.Group()



    theta = -30
    end = getPosOnCircumeference(theta, origin)
    arct = toRadian(theta)
    arcrect = pygame.Rect(origin[0]-30, origin[1]-30, 60, 60)












    
    
    pygame.draw.line(win, AQUA, origin, end, 2)
    pygame.draw.circle(win, WHITE, origin, 3)
    pygame.draw.arc(win, AQUA, arcrect, 0, -arct, 2)

    projectile_group.update()
